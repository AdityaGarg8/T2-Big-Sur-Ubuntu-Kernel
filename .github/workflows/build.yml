---
name: Build Kernel Package

# yamllint disable-line rule:truthy
on:
  [push, pull_request]

jobs:
  Lint:
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout repo'
        uses: actions/checkout@v2
      - name: 'Set up Python 3.9'
        uses: actions/setup-python@v2
      - name: 'Install dependencies'
        run: |
          python -m pip install --upgrade pip
          pip install yamllint
          sudo apt-get install shellcheck bash
      - name: 'Analysing the code'
        run: |
          yamllint -c ${{ github.workspace }}/.github/workflows/.ymllint .
          shellcheck ./*.sh
  Build:
    needs: [Lint]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2

      - name: Build script
        id: build
        run: |
          mkdir /tmp/artifacts
          VERSION=$(grep ^KERNEL_VERSION build.sh | head -n1| cut -d = -f2)
          REL=$(grep "PKGREL=\d*" build.sh | cut -d = -f2)
          #REL=$( git tag |grep -F $VERSION|sort -r|head -n1|tr -d v)
          echo Building $VERSION-$REL
          echo "::set-output name=tag::${VERSION}-${REL}"

          DOCKER_IMAGE=ubuntu:22.04
          docker pull ${DOCKER_IMAGE}
          docker run \
          -t \
          -v "$(pwd)":/repo \
          ${DOCKER_IMAGE} \
          /bin/bash -c 'cd /repo && \
          mkdir /tmp/artifacts && \
          ./build.sh && mkdir /repo/debs && \
          cp -r /tmp/artifacts/* /repo/debs'

          cp -r "$(pwd)"/debs/* /tmp/artifacts
          cd /tmp/artifacts
          ls -l
          dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
          ls -l

      - name: Upload package artifact
        uses: actions/upload-artifact@v2
        with:
          name: linux-T2-${{ steps.build.outputs.tag }}
          path: /tmp/artifacts/*

      - name: Release
        if: github.ref == 'refs/heads/LTS'
        uses: softprops/action-gh-release@v1
        with:
          files: |
            /tmp/artifacts/Packages.gz
            /tmp/artifacts/sha256
            /tmp/artifacts/*.deb
          tag_name: v${{ steps.build.outputs.tag }}
          body_path: ${{ github.workspace }}/.github/workflows/instructions.txt
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Publish:
    needs: [Build]
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout Repo'
        uses: actions/checkout@v2

      - name: Configure GPG Key
        run: |
          echo -n "$GPG_SIGNING_KEY" | base64 --decode | gpg --import
        env:
          GPG_SIGNING_KEY: ${{ secrets.GPG_SIGNING_KEY }}

      - name: Get the kernel upgrade script
        id: publish
        run: |
          git clone -b script https://github.com/t2linux/T2-Ubuntu-Kernel.git
          lts_version=$(cat ${{ github.workspace }}/T2-Ubuntu-Kernel/t2-kernel-script-lts/usr/bin/update_t2_kernel | grep lts_version | awk "NR==1" | cut -d = -f 2)
          getkernelver=$(curl -sL https://github.com/t2linux/T2-Ubuntu-Kernel/releases | grep "{{ urlEncodedRefName }}" | grep -v "generic" | grep v${lts_version} | cut -d "{" -f 3 | cut -c 25- | head -1)
          latest=${getkernelver::-76}
          latestkver=$(echo $latest | cut -d "v" -f 2)
          echo "ver=${latest}" >> $GITHUB_ENV
          sed -i "s/KVER/${latestkver}/g" ${{ github.workspace }}/T2-Ubuntu-Kernel/t2-kernel-script-lts/DEBIAN/control
          chmod 755 ${{ github.workspace }}/T2-Ubuntu-Kernel/t2-kernel-script-lts/DEBIAN/postinst
          cd ${{ github.workspace }}/T2-Ubuntu-Kernel
          dpkg-deb --build --root-owner-group t2-kernel-script-lts
          cd ${{ github.workspace }}
          git clone https://github.com/AdityaGarg8/t2-ubuntu-repo.git
          cp -r ${{ github.workspace }}/T2-Ubuntu-Kernel/t2-kernel-script-lts.deb ${{ github.workspace }}/t2-ubuntu-repo
          cd ${{ github.workspace }}/t2-ubuntu-repo

          # Packages & Packages.gz
          dpkg-scanpackages --multiversion . > Packages
          gzip -k -f Packages

          # Release, Release.gpg & InRelease
          apt-ftparchive release . > Release
          gpg --default-key "${GPG_SIGNING_EMAIL}" -abs -o - Release > Release.gpg
          gpg --default-key "${GPG_SIGNING_EMAIL}" --clearsign -o - Release > InRelease
          cd ${{ github.workspace }}
        env:
          GPG_SIGNING_EMAIL: ${{ secrets.GPG_SIGNING_EMAIL }}
      - name: Publish
        if: github.ref == 'refs/heads/test'
        uses: cpina/github-action-push-to-another-repository@main
        env:
          SSH_DEPLOY_KEY: ${{ secrets.SSH_DEPLOY_KEY }}
        with:
          source-directory: 't2-ubuntu-repo'
          destination-github-username: 'AdityaGarg8'
          destination-repository-name: 't2-ubuntu-repo'
          user-email: github-actions[bot]@users.noreply.github.com
          user-name: github-actions[bot]
          target-branch: main
          commit-message: Update to kernel ${{ env.ver }}
